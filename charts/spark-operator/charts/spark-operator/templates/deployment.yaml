# If the admission webhook is enabled, then a post-install step is required
# to generate and install the secret in the operator namespace.

# In the post-install hook, the token corresponding to the operator service account
# is used to authenticate with the Kubernetes API server to install the secret bundle.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "spark-operator.fullname" . }}
  labels:
    {{- include "spark-operator.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "spark-operator.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
    {{- if or .Values.podAnnotations .Values.metrics.enable }}
      annotations:
      {{- if .Values.metrics.enable }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.port }}"
        prometheus.io/path: {{ .Values.metrics.endpoint }}
      {{- end }}
      {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | trim | nindent 8 }}
      {{- end }}
    {{- end }}
      labels:
        {{- include "spark-operator.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
          {{- toYaml . | trim | nindent 8 }}
        {{- end }}
    spec:
      {{- /*
        Added by OfAS
      */}}
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      {{- /*
        https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
        For Pods running with hostNetwork, you should explicitly set its DNS policy to "ClusterFirstWithHostNet"
      */}}
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      serviceAccountName: {{ include "spark-operator.serviceAccountName" . }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.repository }}:{{ default .Chart.AppVersion .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        ports:
        {{- if .Values.metrics.enable }}
          - name: {{ .Values.metrics.portName | quote }}
            containerPort: {{ .Values.metrics.port }}
        {{- end }}
        {{- /* Added by OfAS */}}
        {{- if .Values.pprof.enable }}
          - name: {{ .Values.pprof.portName | quote }}
            containerPort: {{ .Values.pprof.port }}
        {{- end }}
        {{- /*
           Added by OfAS
        */}}
        {{- if .Values.hostNetwork }}
          - name: webhook
            containerPort: {{ .Values.webhook.port }}
            hostPort: {{ .Values.webhook.port }}
        {{- end }}
        args:
        - -v={{ .Values.logLevel }}
        - -logtostderr
        - -namespace={{ .Values.sparkJobNamespace }}
        - -enable-ui-service={{ .Values.uiService.enable}}
        - -ingress-url-format={{ .Values.ingressUrlFormat }}
        - -controller-threads={{ .Values.controllerThreads }}
        - -resync-interval={{ .Values.resyncInterval }}
        - -enable-batch-scheduler={{ .Values.batchScheduler.enable }}
        - -label-selector-filter={{ .Values.labelSelectorFilter }}
        {{- if .Values.metrics.enable }}
        - -enable-metrics=true
        - -metrics-labels=app_type
        - -metrics-port={{ .Values.metrics.port }}
        - -metrics-endpoint={{ .Values.metrics.endpoint }}
        - -metrics-prefix={{ .Values.metrics.prefix }}
        {{- end }}
        {{- /* Added by OfAS */}}
        {{- if .Values.pprof.enable }}
        - -enable-pprof=true
        - -pprof-port={{ .Values.pprof.port }}
        {{- end }}
        - -disable-executor-reporting={{ .Values.disableExecutorReporting }}
        - -workqueue-token-refill-rate={{ .Values.workqueue.tokenRefillRate }}
        - -workqueue-token-bucket-size={{ .Values.workqueue.tokenBucketSize }}
        {{- if .Values.workqueue.maxDelay.enabled }}
        - -workqueue-max-delay={{ .Values.workqueue.maxDelay.value }}
        {{- end }}
        {{- /* END - Added by OfAS */}}
        {{- if .Values.webhook.enable }}
        - -enable-webhook=true
        - -webhook-svc-namespace={{ .Release.Namespace }}
        - -webhook-port={{ .Values.webhook.port }}
        - -webhook-timeout={{ .Values.webhook.timeout }}
        - -webhook-svc-name={{ include "spark-operator.fullname" . }}-webhook
        - -webhook-config-name={{ include "spark-operator.fullname" . }}-webhook-config
        - -webhook-namespace-selector={{ .Values.webhook.namespaceSelector }}
        {{- end }}
        - -enable-resource-quota-enforcement={{ .Values.resourceQuotaEnforcement.enable }}
        {{- if gt (int .Values.replicaCount) 1 }}
        - -leader-election=true
        - -leader-election-lock-namespace={{ default .Release.Namespace .Values.leaderElection.lockNamespace }}
        - -leader-election-lock-name={{ .Values.leaderElection.lockName }}
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        {{- if or .Values.webhook.enable (ne (len .Values.volumeMounts) 0 ) }}
        volumeMounts:
        {{- end }}
          {{- if .Values.webhook.enable }}
          - name: webhook-certs
            mountPath: /etc/webhook-certs
          {{- end }}
        {{- with .Values.volumeMounts }}
        {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- if .Values.telemetry.enabled }}
        - name: fluentbit
          image: "{{ .Values.telemetry.fluentbit.image.repository }}:{{ .Values.telemetry.fluentbit.image.tag }}"
          ports:
            - name: http
              containerPort: 2020
              protocol: TCP
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: spot-bigdata-telemetry-creds
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: spot-bigdata-telemetry-creds
                  key: AWS_SECRET_ACCESS_KEY
            - name: AWS_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: spot-bigdata-telemetry-creds
                  key: AWS_BUCKET_NAME
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: spot-bigdata-telemetry-creds
                  key: AWS_REGION
            - name: CLUSTER_ID
              valueFrom:
                configMapKeyRef:
                  name: spot-ofas-cluster-info
                  key: clusterId
            - name: ACCOUNT_ID
              valueFrom:
                configMapKeyRef:
                  name: spot-ofas-cluster-info
                  key: accountId
            - name: ORGANIZATION_ID
              valueFrom:
                configMapKeyRef:
                  name: spot-ofas-cluster-info
                  key: organizationId
          resources: {}
          volumeMounts:
            - name: config
              mountPath: /fluent-bit/etc/fluent-bit.conf
              subPath: fluent-bit.conf
            - name: varlog
              readOnly: true
              mountPath: /var/log/
            - name: varlibdockercontainers
              readOnly: true
              mountPath: /var/lib/docker/containers
      {{- end }}
      {{- if or .Values.webhook.enable (ne (len .Values.volumes) 0) .Values.telemetry.enabled }}
      volumes:
      {{- end }}
        {{- if .Values.webhook.enable }}
        - name: webhook-certs
          secret:
            secretName: {{ include "spark-operator.fullname" . }}-webhook-certs
        {{- end }}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.telemetry.enabled }}
        - name: config
          configMap:
            name: bigdata-telemetry-fluentbit-cm
        - name: varlog
          hostPath:
            path: /var/log/
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
