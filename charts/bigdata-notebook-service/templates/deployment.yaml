apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bigdata-notebook-service.fullname" . }}
  labels:
    {{- include "bigdata-notebook-service.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "bigdata-notebook-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "bigdata-notebook-service.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "bigdata-notebook-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      - name: session-storage
        persistentVolumeClaim:
          claimName: {{ .Values.sessionStoragePvcName }}
      # This initContainers section should not be needed if the
      # securityContext.fsGroup entry above wasn't ignored, but unfortunately
      # it is ignored for NFS volumes:
      # https://github.com/kubernetes/examples/issues/260
      initContainers:
      - name: nfs-fixer
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: session-storage
          mountPath: "/mnt"
        command:
        - sh
        - -c
        - (chmod 0775 /mnt; chgrp 1000 /mnt)
      containers:
        - name: bigdata-notebook-service
          ports:
          - name: proxy
            containerPort: {{ .Values.port }}
            protocol: TCP
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          volumeMounts:
          - name: session-storage
            mountPath: "/mnt"
          livenessProbe:
            exec:
              command:
                - bash
                - check-liveness.sh
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: EG_PORT
            value: {{ .Values.port | quote }}
          - name: EG_BASE_URL
            value: {{ .Values.egBaseUrl }}
          - name: EG_NAMESPACE
            value: {{ .Release.Namespace }}
          - name: EG_LIST_KERNELS
            value: {{ .Values.eglistKernels }}
          - name: EG_CULL_IDLE_TIMEOUT
            value: {{ .Values.kernel.cullIdleTimeout | quote }}
          - name: EG_LOG_LEVEL
            value: {{ .Values.egLogLevel }}
          - name: EG_KERNEL_LAUNCH_TIMEOUT
            value: {{ .Values.kernel.launchTimeout | quote }}
          - name: OFAS_KERNEL_NAMESPACE
            value: {{ .Values.kernel.defaultNamespace }}
          - name: SPOTINST_BASE_URL
            value: {{ .Values.spotBaseUrl }}
          - name: EG_RESPONSE_IP
            value: "{{ .Values.kernel.connectionServiceName }}.{{ .Release.Namespace }}.svc.cluster.local"
          - name: EG_PORT_RANGE
            value: "{{ .Values.kernel.portMin }}..{{ .Values.kernel.portMax }}"
          - name: EG_MIN_PORT_RANGE_SIZE  # This one needs to match the range above or JEG won't start
            value: "{{ sub .Values.kernel.portMax .Values.kernel.portMin }}"
          - name: EG_KERNEL_SESSION_PERSISTENCE
            value: "True"
          - name: EG_RESPONSE_ADDR_ANY
            value: "True"
          - name: EG_RESPONSE_PORT
            value: {{ .Values.kernel.egResponsePort | quote }}
          - name: EG_PERSISTENCE_ROOT
            value: "/mnt"
          - name: SPOTINST_CLUSTER_ID
            valueFrom:
              configMapKeyRef:
                name: spot-ofas-cluster-info
                key: clusterId
          - name: SPOTINST_ACCOUNT_ID
            valueFrom:
              configMapKeyRef:
                name: spot-ofas-cluster-info
                key: accountId
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                name: spot-ofas-cluster-info
                key: proxyUrl
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                name: spot-ofas-cluster-info
                key: proxyUrl
                optional: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
    {{- if .Values.telemetry.enabled }}
        - name: fluentbit
          image: "{{ .Values.telemetry.fluentbit.image.repository }}:{{ .Values.telemetry.fluentbit.image.tag }}"
          ports:
            - name: http
              containerPort: 2020
              protocol: TCP
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: spot-bigdata-telemetry-creds
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: spot-bigdata-telemetry-creds
                  key: AWS_SECRET_ACCESS_KEY
            - name: AWS_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: spot-bigdata-telemetry-creds
                  key: AWS_BUCKET_NAME
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: spot-bigdata-telemetry-creds
                  key: AWS_REGION
            - name: CLUSTER_ID
              valueFrom:
                configMapKeyRef:
                  name: spot-ofas-cluster-info
                  key: clusterId
            - name: ACCOUNT_ID
              valueFrom:
                configMapKeyRef:
                  name: spot-ofas-cluster-info
                  key: accountId
            - name: HTTP_PROXY
              valueFrom:
                configMapKeyRef:
                  name: spot-ofas-cluster-info
                  key: proxyUrl
                  optional: true
            - name: HTTPS_PROXY
              valueFrom:
                configMapKeyRef:
                  name: spot-ofas-cluster-info
                  key: proxyUrl
                  optional: true
          resources: {}
          volumeMounts:
            - name: config
              mountPath: /fluent-bit/etc/fluent-bit.conf
              subPath: fluent-bit.conf
            - name: varlog
              readOnly: true
              mountPath: /var/log/
            - name: varlibdockercontainers
              readOnly: true
              mountPath: /var/lib/docker/containers
      volumes:
        - name: config
          configMap:
            name: bigdata-telemetry-fluentbit-cm
        - name: varlog
          hostPath:
            path: /var/log/
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
    {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
